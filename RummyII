#include <iostream>
#include <cstdlib>
#include <list>
#include <ctime>
#include <vector>
#include "rummy.h"
using namespace std;
//bool needs to be changed where it is not just 7 cards
// needs a class


vector<int>newDeck(){ // creates the vector to hold all 52 cards
	vector <int>deck;
	for (int i = 0; i <52; ++i){
		deck.pushback(i);
		}
	shuffle(deck);
	return deck;
	}

char getSuit(int i) { // Determines the suit 
		if (i<13){
			return 'S';} //S = Spades
		else if (i<26) {
			return 'C';} //C = Clover
		else if (i<39){
			return 'H';}  //H = Hearts
		else
			return 'D';}} // D = Diamonds

char getCardNumber (int i ) { //Converts I into the actual number on the card
	int hold = i% 13;
		if(hold==0)
			return 'A';
		if(hold == 1)
			return '2';
		if(hold == 2 )
			return '3';
		if(hold == 3 )
			return '4';
		if(hold == 4 )
			return '5';
		if(hold == 5 )
			return '6';
		if(hold == 6 )
			return '7';
		if(hold == 7 )
			return '8';
		if(hold == 8 )
			return '9';
		if(hold == 9 )
			return '10';
		if(hold == 10)
			return 'J';
		if(hold == 11)
			return 'Q';
		if(hold == 12)
			return 'K';
			}}


void PrintYourDeck(vector<int>hand) { //Prints your deck to show
	int length = hand.size();
	for (int i = 0; i < 10; i++)
	{
	for (int j = 0; j < size; j++)
	{
		char hold = getCardNumber((hand[j]));
		char suit = getSuit((hand[j]));
			for (int k = 0; k < 8; k++)
				{
			if ((k == 1 && i == 1) || (k == 6 && i == 8) || (k == 3 && i == 4)) //prints the number card
				cout << hold; 
			else if ((k == 6 && i == 1) || (k == 1 && i == 8) || (k == 4 && i == 5)) //prints the suit
				cout << suit;
			else
				cout << " ";}}
				cout << endl;}
				cout << endl;
				}


	List<int> Remaining(){ // list created to hold unused cards
			list<int> remaining;
			for (int i = 0; i < 52; i++){
				remaining.push_back(i);
				return remaining;
					}
	
	void shuffle(vector<int> &deck){ // Loop that goes through and loops a change in cards randomly by ctime
		srand(time(NULL));
		int length = deck.size();
			for (int i = size-1; i >0; i--)
				{
				int pos = rand() % i;
				swap(deck, i, pos);
					}}
					
	void swapcards(vector<int> &card, int pos1, int pos2) //swap cards
		{
			int temp = card[pos1]; // temp is used to temporarily swap and hold cards
			card[pos1] = card[pos2];
			card[pos2] = temp;
			}

	void dealCards(vector<int> &deck, vector<int> &user, vector<int> &CPUS)
		{ 
			for (int i = 0; i < 14; i ++)
				{
				int topCard = deck.back();
				deck.pop_back();
					if (i%2 == 0)
						user.push_back(topCard); //deals a card to the user
					else
						CPUS.push_back(topCard);}} //deals a card to the CPU
	
	
	void fixRemainderCards(list<int> &remaining, vector<int> hand) // takes card used from the remaining deck
	{
			for (int i = 0; i < hand.size(); i++)
				remaining.remove(hand[i]);
				}
	void printTurnCard(int v)
	{
		char suit = getSuit(v); //calls a function from another function , can't believe it works but i tried it :D
		char rank = getRank(v); //calls a function from another function
		cout << rank <<" " <<suit<<endl;}
	void meldsSorted(vector<int> &integers, int startInArray, int finishInArray){ /// sorts the vector of integers where the vector is in order
		if ((finishInArray - startInArray) <= 1)
			return;
			int m = (finish - start) / 2;
			meldsSorted(integers, startInArray, startInArray+m); //calls on itself in the void and sorts it by smallest to biggest
			meldsSorted(integers, startInArray+m, finishInArray); //calls on itself in the void and sorts it by biggest to littlest
			vector<int> temp;
			meldsSorted(integers, start, start+m, finish, temp);
			int tempIndex = 0;
				for (int i = start; i < finish; i++){ //temporarily stores
					integers[i] = temp[tempIndex++];
						}}

		bool isWinner(vector<int> hand) //true or false function tht determines a type of meld
			{
				mergeSort(hand, 0, hand.size()); // sort hand first
				if (hand[0] % 13 < 10 && hand[1] == hand[0] + 1 && hand[2] == hand[0] + 2 && hand[3] == hand[0] + 3){
					{ return true;}  //checks for the first cards to be 4 in a row by numbers
						if (hand[4] % 13 < 11 && hand[5] == hand[4] + 1 && hand[6] == hand[4] + 1){
							return true;} //checks for the last three in a row by number
						if (hand[4] % 13 == hand[5] % 13 && hand[4] % 13 == hand[6] % 13){
							return true; // checks for the last three in a row by suit
				if (hand[0] % 13 < 11 && hand[1] == hand[0] + 1 && hand[2] == hand[0] + 2)
					{ //checks if the first three in a row
						if (hand[3] % 13 < 10 && hand[4] == hand[3] + 1 && hand[5] == hand[3] + 2 && hand[6] == hand[3] + 3)
							return true; //checks last four in a row
						if (hand[3] % 13 == hand[4] % 13 && hand[3] % 13 == hand[5] % 13
							&& hand[3] % 13 == hand[6] % 13)
								return true; //checks for same rank
									}}}}
	
	vector<int> nonMatches;
	for (int i = 0; i < hand.size(); i++)
	{
	if (hand[i] % 13 != hand[0] % 13)
	nonMatches.push_back(hand[i]);
	}
	
	/* Check for a legitimate number of nonmatches (3 or 4) */
	if (nonMatches.size() != 3 && nonMatches.size() != 4)
	return false;
	
	/* Check if nonmatches are not in a row */
	bool areInARow = true;
	for (int i = 0; i < nonMatches.size(); i++)
	{
	if (nonMatches[i] != nonMatches[0] + i)
	areInARow = false;
	}
	if (areInARow)
	return true;
	
	/* Check if nonmatches are not the same */
	for (int i = 0; i < nonMatches.size(); i++)
	{
	if (nonMatches[i] % 13 != nonMatches[0] % 13)
	return false;
	}
	return true;
	}
	void playUserTurn(State &state)
{
/* Give user options for drawing */
if (state.turnCard < 52)
cout << "Enter \"t\" to take the turn card." << endl;
cout << "Enter \"d\" to draw a card from the deck." << endl;
char choice;
cin >> choice;
while (choice != 'd' && (choice != 't' || state.turnCard == 52))
{
if (state.turnCard < 52)
cout << "Enter \"t\" to take the turn card." << endl;
cout << "Enter \"d\" to draw a card from the deck." << endl;
cin >> choice;
}
/* handle user wants the turn card */
if (choice == 't')
state.userHand.push_back(state.turnCard);
/* handle user wants to draw a new card from the deck */
else
{
state.userHand.push_back(state.deck.back());
state.deck.pop_back();
}
printHand(state.userHand);

/* Give user options for tossing */
cout << "Enter \"g\" to give back a card or \"r\" to rearrange your hand.";
cout << endl;
cin >> choice;
while (choice != 'g' && choice != 'r')
{
cout << "Enter \"g\" to give back a card or \"r\" to rearrange your hand.";
cout << endl;
cin >> choice;
}
while (choice != 'g')
{
/* Handle user wants to rearrange hand */
if (choice == 'r')
{
char pos1, pos2;
cout << "Enter the position of first card to swap [1-8]." << endl;
cin >> pos1;
while (pos1 < '1' || pos1 > '8')
{
cout << "Enter the position of first card to swap [1-8]." << endl;
cin >> pos1;
}
cout << "Enter the position of second card to swap [1-8]." << endl;
cin >> pos2;
while (pos2 < '1' || pos2 > '8')
{
cout << "Enter the position of second card to swap [1-8]." << endl;
cin >> pos2;
}
/* swap cards */
swap(state.userHand, pos1-49, pos2-49); // subtract 48 for ASCII, subtract 1 more for 0 indexing
printHand(state.userHand); // print user's hand
}
/* Give user options for tossing */
cout << "Enter \"g\" to give back a card or \"r\" to rearrange your hand.";
cout << endl;
cin >> choice;
while (choice != 'g' && choice != 'r')
{
cout << "Enter \"g\" to give back a card or \"r\" to rearrange your hand.";
cout << endl;
cin >> choice;
}
}
/* handle user wants to give back a card */
if (choice == 'g')
{
cout << "Enter the position of the card you would like to give back [1-8].";
cout << endl;
char pos;
cin >> pos;
while (pos < '1' || pos > '8')
{
cout << "Enter the position of the card you would like to give back [1-8].";
cout << endl;
cin >> pos;
}
state.turnCard = state.userHand[pos-49]; // set turn card
state.remaining.remove(state.turnCard); // remove from remaining cards
state.userHand.erase(state.userHand.begin()+pos-49); // remove from user hand
}
}
	void merge(vector<int> integers, int a1, int m, int b2, vector<int> &output)
	{
	int a2, b1;
	a2 = b1 = m;
	while (a1 < a2 && b1 < b2)
	{
	if (integers[a1] <= integers[b1])
	output.push_back(integers[a1++]);
	else
	output.push_back(integers[b1++]);
	}
	
	while (a1 < a2)
	output.push_back(integers[a1++]);
	while (b1 < b2)
	output.push_back(integers[b1++]);
	}
		bool gameOver(State state)
	{
	/* Check if user won */
	if (isWinner(state.userHand))
	{
	cout << "You won the game!" << endl;
	printHand(state.userHand);
	return true;
	}
	
	/* Check if agent won */
	if (isWinner(state.agentHand))
	{
	cout << "Read 'em and weep!" << endl;
	printHand(state.agentHand);
	cout << "You lost the game :(" << endl;
	return true;
	}
	
	/* No player has won */
	return false;
	}
	int evaluate(State state)
	{
	mergeSort(state.agentHand, 0, state.agentHand.size());
	vector<int> hand = state.agentHand;
	list<int> remaining = state.remaining;
	int score = 0; // score of hand
	int rank; // rank of card
	int val; // stored value of card
	
	/* Check if hand is a winner */
	if (isWinner(hand))
	return 100;
	
	/* Check for 4 of a kind or 4 in a row */
	for (int i = 0; i < hand.size() - 3; i++)
	{
	val = hand[i];
	rank = val % 13;
	/* Check for 4 of a kind */
	int matchCount = 0;
	for (int j = i + 1; j < hand.size(); j++)
	{
	if (rank == hand[j] % 13)
	matchCount++;
	}
	if (matchCount == 3)
	{
	score += 15;
	matchCount = 0;
	}
	
	/* Check for 4 in a row */
	if (val < 10 && val+1 == hand[i+1] && val+2 == hand[i+2]
	&& val+3 == hand[i+3])
	score += 15;
	}
	
	/* Check for 3 of a kind or 3 in a row */
	for (int i = 0; i < hand.size() - 2; i++)
	{
	val = hand[i];
	rank = val % 13;
	
	/* Check for 3 of a kind */
	int matchCount = 0;
	for (int j = i + 1; j < hand.size(); j++)
	{
	if (rank == hand[j] % 13)
	matchCount++;
	}
	if (matchCount == 2)
	{
	score += 9;
	/* Check for 1 of the same kind in remaining cards */
	for (list<int>::iterator it = remaining.begin();
	it != remaining.end(); it++)
	if (*it % 13 == rank)
	score ++;
	matchCount = 0;
	} 
	
	/* Check for 3 in a row */
	if (rank < 11 && val+1 == hand[i+1] && val+2 == hand[i+2])
	{
	score += 9;
	/* Check for 1 before and 1 after in remaining cards */
	for (list<int>::iterator it = remaining.begin();
	it != remaining.end(); it++)
	{
	if (rank > 0 && *it == val - 1)
	score++;
	if (rank < 10 && *it == val + 3)
	score++;
	}
	}
	}
	
	/* Check for 2 of a kind or 2 in a row */
	for (int i = 0; i < hand.size() - 1; i++)
	{
	val = hand[i];
	rank = val % 13;
	
	/* Check for 2 of a kind */
	int matchCount = 0;
	for (int j = i + 1; j < hand.size(); j++)
	{
	if (rank == hand[j] % 13)
	matchCount++;
	}
	if (matchCount == 1)
	{
	/* Check to see if any remain */
	for (list<int>::iterator it = remaining.begin();
	it != remaining.end(); it++)
	if (*it % 13 == rank)
	score++;
	matchCount = 0;
	}
	
	/* Check for 2 in a row */
	if (rank < 12 && val+1 == hand[i+1])
	{
	/* Check for 1 or 2 before and 1 or 2 after in remaining cards */
	for (list<int>::iterator it = remaining.begin();
	it != remaining.end(); it++)
	{
	if (rank > 0 && *it == val - 1)
	{
	score++;
	for (list<int>::iterator jt = remaining.begin();
	jt != remaining.end(); jt++)
	if (rank > 1 && *jt == val - 2)
	score++;
	}
	if (rank < 11 && *it == val + 2)
	{
	score++;
	for (list<int>::iterator jt = remaining.begin();
	jt != remaining.end(); jt++)
	if (rank < 10 && *jt == val + 3)
	score++;
	}
	}
	} 
	}
	
	return score;
	}

	State initializeState()
	{
	State state;
	state.deck = getNewDeck();
	state.remaining = initializeRemaining();
	dealCards(state.deck, state.userHand, state.agentHand);
	adjustRemaining(state.remaining, state.agentHand);
	mergeSort(state.userHand, 0, state.userHand.size());
	state.turnCard = 52;
	return state;
	}

int main(int argc, char **argv)
{
State state = initializeState();
printState(state);
while (gameOver(state) == false)
{
playUserTurn(state);
if (gameOver(state))
break;
playAgentTurn(state);
printState(state);
}
return 0;
}


